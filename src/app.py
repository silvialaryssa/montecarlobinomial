import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Configura√ß√µes da p√°gina
st.set_page_config(page_title="Simula√ß√£o Monte Carlo - Falhas Cr√≠ticas por Vers√£o", layout="centered")

st.title("Simula√ß√£o de Monte Carlo com Distribui√ß√£o Binomial - Silvia Branco")
st.subheader("Qualidade de Software - Estimativa de Falhas Cr√≠ticas por Vers√£o de Software")

st.markdown("""
Esta aplica√ß√£o simula o n√∫mero de **falhas cr√≠ticas** em vers√µs de uma aplicativo ap√≥s o deploy, 
usando a **distribui√ß√£o binomial** e a **t√©cnica de Simula√ß√£o de Monte Carlo**.
""")

# Entradas do usu√°rio
n_funcionalidades = st.slider("N√∫mero de funcionalidades por vers√£o", min_value=1, max_value=100, value=10)
n_deploys = st.slider("N√∫mero de deploys por vers√£o", min_value=5, max_value=50, value=15)
p_falha = st.slider("Probabilidade de falha cr√≠tica por deploy (%)", min_value=1, max_value=20, value=5) / 100
n_simulacoes = st.slider("N√∫mero de vers√µes simuladas", min_value=1000, max_value=50000, value=10000, step=1000)

# Simula√ß√£o de Monte Carlo
st.markdown("### Simula√ß√£o de Falhas Cr√≠ticas por Vers√£o")
st.write(f"Simulando {n_simulacoes} vers√µes do APP com {n_funcionalidades} funcionalidades, "
         f"{n_deploys} deploys por vers√£o e probabilidade de falha cr√≠tica de {p_falha * 100:.1f}%.")
np.random.seed(42)
falhas = np.random.binomial(n=n_deploys * n_funcionalidades, p=p_falha, size=n_simulacoes)

## Estat√≠sticas
media = np.mean(falhas)
desvio = np.std(falhas)
prob_5_ou_mais = np.mean(falhas >= 5)

st.markdown("""
### Resultados Estat√≠sticos
- M√©dia de falhas por vers√£o: **{:.2f}**
- Desvio padr√£o: **{:.2f}**
- Probabilidade de ao menos 5 falha cr√≠tica por vers√£o: **{:.1f}%**
""".format(media, desvio, prob_5_ou_mais* 100))


# Gr√°fico de distribui√ß√£o
st.markdown("### Distribui√ß√£o do N√∫mero de Falhas Cr√≠ticas por Vers√£o de Software")

# Estilo do gr√°fico
sns.set_theme(style="whitegrid", font_scale=1)

fig, ax = plt.subplots(figsize=(20, 12))

# Histograma com Seaborn
sns.histplot(falhas, 
             bins=range(0, max(falhas) + 2), 
             kde=True, 
             color="steelblue", 
             edgecolor="black", 
             ax=ax)

# R√≥tulos das barras
counts, bins, _ = ax.hist(falhas, bins=range(0, max(falhas) + 2), alpha=0)
for count, x in zip(counts, bins):
    if count > 0:
        ax.text(x + 0.5, count + 0.5, int(count), ha='center', va='bottom', fontsize=12)

# Histograma e KDE
ax.set_title("Distribui√ß√£o Binomial Simulada ‚Äì Falhas Cr√≠ticas por Vers√£o", fontsize=14, weight='bold')
ax.set_xlabel("N√∫mero de Falhas Cr√≠ticas", fontsize=12)
ax.set_ylabel("Frequ√™ncia Observada", fontsize=12)
ax.grid(axis='y', linestyle='--', alpha=0.5)
ax.set_xticks(range(0, max(falhas) + 1))

# Legenda
ax.legend(["KDE (Curva de densidade)", "Histograma"], loc='upper right')

st.pyplot(fig)

# Respoosta da Projeto AEDI
st.title("Cen√°rio Realista: Probabilidade de ocorr√™ncia de falhas em uma nova vers√£o de software ap√≥s o deploy")

st.header("A) Modelo computacional que simule um Cen√°rio Realista")

st.markdown("""
Uma vers√£o de aplicativo geralmente representa um pacote de funcionalidades, corre√ß√µes ou mudan√ßas que ser√° liberado para o ambiente produtivo. Essa libera√ß√£o pode ocorrer de forma √∫nica, com todas as altera√ß√µes agrupadas, ou ser dividida em m√∫ltiplos deploys ‚Äî por exemplo, por meio de *feature toggles* ou mesmo uma arquitetura de microservi√ßos.

Em cen√°rios com arquitetura distribu√≠da, como microservi√ßos, uma mesma vers√£o de produto pode demandar m√∫ltiplos deploys. Por exemplo, a vers√£o **v2.5.0** de um aplicativo banc√°rio pode incluir mudan√ßas em diferentes componentes, como o servi√ßo de login, o servi√ßo de notifica√ß√µes e o servi√ßo de contas. Cada um desses componentes √© implantado de forma independente.

Com foco em confiabilidade, o time respons√°vel pela qualidade acompanha quantos desses deploys falham ou introduzem falhas cr√≠ticas. Com base no hist√≥rico, foi estimada uma probabilidade aproximada de **5% de ocorr√™ncia de falha cr√≠tica por deploy**.

Nesse contexto, o total de oportunidades para a ocorr√™ncia de falhas em uma vers√£o pode ser estimado por:""")

#st.markdown('<p style="text-align: center;">n = n√∫mero de funcionalidades √ó n√∫mero de deploys</p>', unsafe_allow_html=True)

st.latex(r"n = \text{n√∫mero de funcionalidades} \times \text{n√∫mero de deploys}")

st.markdown("""
A ocorr√™ncia de uma falha cr√≠tica em um desses deploys pode ser modelada como um evento bin√°rio: h√° falha (sucesso para o evento de interesse) ou n√£o h√° falha (fracasso). Sendo assim, o n√∫mero total de falhas cr√≠ticas por vers√£o pode ser modelado como uma vari√°vel aleat√≥ria binomial:
""")

st.latex(r"X \sim \text{Binomial}(n, p)")

st.markdown("""
**Onde:**  
- **n** representa o n√∫mero de tentativas (deploys com funcionalidades);  
- **p** representa a probabilidade de falha cr√≠tica em cada tentativa (estimada em 5%).

Utilizamos a **Simula√ß√£o de Monte Carlo** para gerar vers√µes simuladas, com valores de falhas cr√≠ticas ($X$) gerados conforme a distribui√ß√£o binomial. Isso permite obter uma vis√£o probabil√≠stica do risco de falhas por vers√£o.
""")


st.header("B) Fundamentos Estat√≠sticos e Justificativa da Distribui√ß√£o Utilizada")

st.markdown("""
A **distribui√ß√£o binomial** descreve o comportamento de uma vari√°vel dicot√¥mica em amostras aleat√≥rias (BUSSAB; MORETTIN, 2007).

Al√©m disso, segundo **Bruce e Bruce (2020)**, a distribui√ß√£o binomial √© a distribui√ß√£o de frequ√™ncia do n√∫mero de sucessos \\(x\\) em dado n√∫mero de ensaios \\(n\\), com probabilidade especificada \\(p\\) de sucesso em cada ensaio.
""")

st.markdown("A m√©dia de uma distribui√ß√£o binomial √© dada por:")
st.latex(r"\mu = n \times p")

st.markdown("E a vari√¢ncia por:")
st.latex(r"\sigma^2 = n \times p \times (1 - p)")

st.markdown("""
Com um n√∫mero grande de ensaios (especialmente quando \\(p\\) est√° pr√≥ximo de 0,50), a distribui√ß√£o binomial √© virtualmente indistingu√≠vel da distribui√ß√£o normal.

Nesse contexto, a justificativa para o uso da **distribui√ß√£o binomial** no cen√°rio escolhido se baseia em sua **adequa√ß√£o ao fen√¥meno modelado**, considerando que:

- **Os resultados s√£o bin√°rios:** cada tentativa tem dois poss√≠veis resultados (falha ou n√£o-falha);
- **A probabilidade √© constante:** sup√µe-se uma probabilidade \\(p = 0.5\\) (5%) constante de falha cr√≠tica por tentativa, ajust√°vel conforme o hist√≥rico de incidentes da equipe;
- **Os eventos s√£o independentes:** cada tentativa (deploy-funcionalidade) √© considerada independente, devido √† modularidade dos sistemas compostos por microservi√ßos, onde uma falha n√£o influencia diretamente outra.

Essas condi√ß√µes justificam formalmente o uso da distribui√ß√£o binomial como **modelo estat√≠stico para o total de falhas cr√≠ticas por vers√£o**.
""")

import streamlit as st

st.header("c) An√°lise Cr√≠tica dos Resultados da Simula√ß√£o de Monte Carlo")

st.markdown("""
A escolha da **distribui√ß√£o binomial** impacta diretamente os resultados da simula√ß√£o, pois permite **modelar adequadamente a ocorr√™ncia de falhas cr√≠ticas** com base em uma probabilidade de falhas associada ao n√∫mero de funcionalidades, em um contexto de m√∫ltiplos deploys.

Dessa forma, a **Simula√ß√£o de Monte Carlo** n√£o apenas estima a m√©dia esperada de falhas, mas tamb√©m gera a **distribui√ß√£o dos poss√≠veis cen√°rios**.

### Implica√ß√µes pr√°ticas e infer√™ncias:

A simula√ß√£o permite derivar **infer√™ncias quantitativas √∫teis** para a tomada de decis√£o na engenharia de software. Por exemplo:

- **Planejamento de vers√µes:** √© poss√≠vel estimar quantas funcionalidades ou vers√µes podem ser lan√ßadas mantendo-se dentro de um limite aceit√°vel de falhas (por exemplo, no m√°ximo 5 falhas cr√≠ticas por vers√£o);
- **Defini√ß√£o de metas de qualidade:** ao variar os par√¢metros (n√∫mero de funcionalidades por deploy, taxa de falha), a equipe pode simular **cen√°rios futuros** e alinhar **expectativas de qualidade** com as √°reas intervenientes.
""")

st.header("Refer√™ncias")

st.markdown("""
- CALLEGARI-JACQUES, S√≠dia M. *Bioestat√≠stica: princ√≠pios e aplica√ß√µes*. 2. ed. Porto Alegre: Artmed, 2003.  
- BRUCE, Peter; BRUCE, Andrew. *Estat√≠stica b√°sica para cientistas de dados: 50 conceitos essenciais*. S√£o Paulo: Alta Books, 2020.
""")

# Rodap√©
st.markdown("---")
st.caption("Aluna: Sivia Branco")
st.markdown("""
- üîó [Projeto em HTML no Hugging Face](https://huggingface.co/spaces/silviabranco/unbaedi)  
- üåê [Projeto na Community Cloud (Streamlit App)](https://montecarlobinomial-unbsilvia.streamlit.app/)  
- üíª [C√≥digo fonte no GitHub](https://github.com/silvialaryssa/montecarlobinomial/blob/main/app.py)
""")

